// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PhaseContinuousIntegration component should render correctly 1`] = `
<div>
  <section
    class="container_regular"
  >
    <h2
      class="case_title_h2 m-24_bottom"
    >
      
    Phase 2: Continuous integration (CI)
  
    </h2>
     
    <div
      class="colored-cards card-grid-type--two-two"
    >
      <div
        class="colored-card colored-card--1 background-color-silver"
      >
        <!---->
         
        <div
          class="colored-card__footer"
        >
          <!---->
           
          <h3
            class="colored-card__title case_title_h4 m-10_bottom media-m-8_bottom"
          >
            
      Challenge
    
          </h3>
           
          <p
            class="case_paragraph colored-card__description"
          >
            
        Development processes lacked consistency. Particularly, the project had manually configured CI system and pipelines, different development, test, and production environments and runtimes, non-reproducible development environment, inconsistent test builds.
      
          </p>
           
        </div>
      </div>
      <div
        class="colored-card colored-card--2 background-color-blue-light"
      >
        <!---->
         
        <div
          class="colored-card__footer"
        >
          <!---->
           
          <h3
            class="colored-card__title case_title_h4 m-10_bottom media-m-8_bottom"
          >
            
      Solution
    
          </h3>
           
          <p
            class="case_paragraph colored-card__description"
          >
            
        Dockerization is the most viable solution today to set up continuous delivery. As our application was back then partially hosted on Heroku, we created a unified runtime for developers and CI by dockerizing the main app using a Heroku Stack image and Docker Compose. It made CI reliable and allowed simplifying deployment. Also, it sped up bootstrapping of the development environment.
      
          </p>
           
        </div>
      </div>
    </div>
     
    <div
      class="case_quote-wrap m-48_top m-96_bottom media-m-24_top media-m-72_bottom m-auto"
    >
      <blockquote
        class="case_blockquote-box m-auto"
      >
        
    The developers didn’t trust their CI system. CI wasn’t helping them; it was hindering their work instead. It’s
    just bad DevOps.
  
      </blockquote>
       
      <p
        class="case_quote-author"
      >
        
    Andrew Sapozhnikov, Head of DevOps
  
      </p>
    </div>
     
    <h3
      class="case_title_h3 m-38_bottom media-m-24_bottom"
    >
      
    What we achieved
  
    </h3>
     
    <div
      class="case_achievements m-48_bottom media-m-24_bottom"
    >
      <p
        class="case_paragraph case_achievement-item"
      >
        
      Reproducible 
        <br />
         CI results
    
      </p>
       
      <p
        class="case_paragraph case_achievement-item"
      >
        
      Unified 
        <br />
         runtime
    
      </p>
       
      <p
        class="case_paragraph case_achievement-item"
      >
        
      Standardized development, test, and production environments
    
      </p>
    </div>
     
    <div
      class="case_ci-panel m-96_bottom media-m-48_bottom"
    >
      <picture-stub
        alt="CI Panel."
        extension="png"
        file="ci-panel"
        folder="veeqo"
        height="440"
        lazy="true"
        width="818"
      />
    </div>
     
    <h3
      class="case_title_h3 m-12_bottom"
    >
      
    Moving Jenkins
  
    </h3>
     
    <p
      class="case_paragraph m-34_bottom"
    >
      
    Jenkins was operated manually on a separate EC2 instance. Managing it was thus challenging, especially in
    emergencies. We moved the Jenkins master to ECS by remaking its provisioning, deployment, and updating (Later,
    we’ll move it to k8s, but in 2017, ECS was the only good option for us). We reduced build time and cost by
    allocating a small part of compute resources of Jenkins agents to reserved instances and moving 90% of the load to
    spot instances.
  
    </p>
     
    <p
      class="case_paragraph case_bold"
    >
      
    We further renovated CI by:
  
    </p>
     
    <ul
      class="case_list"
    >
      <li
        class="list-item_dot"
      >
        Creating Jenkinsfiles for all repositories thus making pipelines reproducible
      </li>
       
      <li
        class="list-item_dot"
      >
        Creating backups
      </li>
       
      <li
        class="list-item_dot"
      >
        Running access audit and configuring SSO for more secure access
      </li>
    </ul>
     
    <textquote-stub
      author="Maxim Glotov, DevOps Engineer"
      class="m-auto m-96_top m-96_bottom media-m-48_top media-m-72_bottom"
    >
      
    Everything down to the last comma is now written in the form of code. Even if we took Jenkins down completely and
    had to build it from scratch again, it’d take us no more than 10 minutes.
  
    </textquote-stub>
  </section>
</div>
`;
