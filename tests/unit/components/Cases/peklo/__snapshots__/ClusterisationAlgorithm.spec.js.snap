// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ClusterisationAlgorithm component should render correctly 1`] = `
<div>
  <section>
    <div
      class="container_regular"
    >
      <h2
        class="case_title_h2 case_title m-24_bottom"
      >
        
      Clusterisation algorithm
    
      </h2>
       
      <p
        class="case_paragraph case_introduction-paragraph m-24_bottom"
      >
        
      The clusterisation algorithm was the project’s main challenge and is now its main strength. 
        <br />
         
        <span
          class="case_bold"
        >
          Here’s how it goes:
        </span>
      </p>
    </div>
     
    <div
      class="container_full background-color-silver m-48_bottom media-m-24_bottom p-48_top p-48_bottom media-p-24_top media-p-24_bottom"
    >
      <div
        class="container_regular"
        data-aos="fade-up"
        data-aos-anchor-placement="bottom"
      >
        <div
          class="lottie-container case_lottie"
          id="clusterisation-algorithm"
          style="--height: 416px; --width: 100%;"
        />
      </div>
    </div>
     
    <div
      class="container_regular"
    >
      <p
        class="case_paragraph m-12_bottom"
      >
        
      *The looping-over process is problematic for many reasons. First, human language is messy and hard to codify. Second, phrases can contain different word forms. We also needed to consider that words can be misspelled and typoed. Finally, the system needs to recognise synonyms.
    
      </p>
       
      <p
        class="case_paragraph m-12_bottom"
      >
        
      Our first solution was to build parsers for extensive dictionaries having all possible word forms. Peklo Tool’s early version would load the dictionaries into RAM, but later, we switched to a database. The algorithm also uses thesauri and lists of typos and misspellings to interpret synonyms as one token and cluster them together.
    
      </p>
       
      <p
        class="case_paragraph m-48_bottom media-m-24_bottom"
      >
        
      In clusterisation, Peklo Tool’s early version used the Aho–Corasick algorithm to find matches.
    
      </p>
    </div>
     
    <div
      class="container_middle m-48_bottom media-m-24_bottom slider"
      data-aos="fade-up"
      data-aos-anchor-placement="bottom"
    >
      <swiper-stub
        boxshadow="true"
        components="[object Object],[object Object]"
        safaritopbaralt=""
        safaritopbarimage=""
        sliderdescription=""
      />
    </div>
     
    <div
      class="container_regular"
    >
      <p
        class="case_paragraph case_bold m-8_bottom"
      >
        
      Later on, we moved to a more brute-force algorithm:
    
      </p>
       
      <ul
        class="case_list m-12_bottom"
      >
        <li
          class="list-item_dot"
        >
          Split a phrase into tokens
        </li>
         
        <li
          class="list-item_dot"
        >
          Loop over all other phrases
        </li>
         
        <li
          class="list-item_dot"
        >
          Split each of them into tokens
        </li>
         
        <li
          class="list-item_dot"
        >
          Count equal tokens (consider synonyms and prepositions)
        </li>
      </ul>
       
      <p
        class="case_paragraph m-96_bottom media-m-48_bottom"
      >
        
      It’s simpler, faster, and more cache-friendly than the Aho–Corasick algorithm. Most importantly, it’s sufficient for lists of keywords for a contextual advertising campaign.
    
      </p>
       
      <h3
        class="case_title_h4 m-12_bottom"
      >
        
      Generation of ad texts
    
      </h3>
       
      <p
        class="case_paragraph"
      >
        
      Another challenge was to automate the process of putting together different ad texts for each group of keywords. It’s an advanced combinatorial problem. We needed to implement an algorithm that would know how to write imperative sentences, what words to use in them, and how to connect those words.
    
      </p>
       
      <div
        class="case_quote-wrap m-48_top m-48_bottom media-m-24_top media-m-24_bottom m-auto"
        data-aos="fade-up"
        data-aos-anchor-placement="bottom"
      >
        <blockquote
          class="case_blockquote-box m-auto"
        >
          
      No ready-made solutions were available anywhere on the Internet, so we built the algorithm from scratch using dynamic programming. It turned out to be quite efficient. It produces impressive results with little resources.
    
        </blockquote>
         
        <p
          class="case_quote-author"
        >
          
    Oleg Katkov, Software engineer
  
        </p>
      </div>
       
      <p
        class="case_paragraph m-24_bottom media-m-48_bottom"
      >
        
      After collecting keywords and having them automatically grouped by Peklo Tool, the user can feed a few unique selling propositions to the ad text generation feature.
    
      </p>
       
      <h4
        class="case_title_h5 m-12_bottom"
      >
        
      Peklo Tool then creates hundreds of ad texts within seconds:
    
      </h4>
    </div>
     
    <div
      class="container_middle case_img-wrapper"
      data-aos="fade-up"
      data-aos-anchor-placement="bottom"
    >
      <picture-stub
        alt="Generation of ad texts"
        extension="png"
        file="generation-of-ad-texts"
        folder="peklo"
        height="517"
        lazy="true"
        width="1026"
      />
       
      <p
        class="case_paragraph case_img-alt m-12_top media-m-8_top m-96_bottom media-m-48_bottom m-auto"
        style="color: rgb(164, 168, 180);"
      >
        
      The structure of a contextual advertising campaign for a car repair business. Ad texts have been generated automatically based on keyword groups and unique selling propositions.
    
      </p>
    </div>
     
    <div
      class="container_regular"
      data-aos="fade-up"
      data-aos-anchor-placement="bottom"
    >
      <h3
        class="case_title_h3 m-24_bottom media-m-12_bottom"
      >
        
      Additional functions
    
      </h3>
       
      <div
        class="colored-cards m-72_bottom media-m-48_bottom card-grid-type--two-one"
      >
        <div
          class="colored-card colored-card--1 background-color-black"
        >
          <!---->
           
          <div
            class="colored-card__footer"
          >
            <!---->
             
            <h3
              class="colored-card__title case_title_h4 m-10_bottom media-m-8_bottom text-color-white"
            >
              
      Detection of negative keywords
    
            </h3>
             
            <p
              class="case_paragraph colored-card__description text-color-white"
            >
              
        The tool identifies irrelevant keywords for narrower, more specific targeting.
      
            </p>
             
          </div>
        </div>
        <div
          class="colored-card colored-card--2 background-color-gray"
        >
          <!---->
           
          <div
            class="colored-card__footer"
          >
            <!---->
             
            <h3
              class="colored-card__title case_title_h4 m-10_bottom media-m-8_bottom text-color-white"
            >
              
      Removal of explicit and implicit duplicates
    
            </h3>
             
            <p
              class="case_paragraph colored-card__description text-color-white"
            >
              
        Duplicates inevitably occur, and the tool is configured to eliminate them.
      
            </p>
             
          </div>
        </div>
        <div
          class="colored-card colored-card--3 background-color-yellow"
        >
          <!---->
           
          <div
            class="colored-card__footer"
          >
            <!---->
             
            <h3
              class="colored-card__title case_title_h4 m-10_bottom media-m-8_bottom"
            >
              
      Elimination of negative keywords across groups
    
            </h3>
             
            <p
              class="case_paragraph colored-card__description"
            >
              
        This reduces competition among keywords so that users see relevant ads and get to the right pages.
      
            </p>
             
          </div>
        </div>
      </div>
    </div>
  </section>
</div>
`;
