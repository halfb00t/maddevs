// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FaultTolerance component should render correctly 1`] = `
<div>
  <section>
    <div
      class="container_regular"
    >
      <h2
        class="case_title_h2 m-24_bottom media-m-12_bottom"
      >
        
      Building a fault-tolerant architecture
    
      </h2>
       
      <p
        class="case_paragraph m-24_bottom"
      >
        
      We invested much effort in the architecture because we wanted to do things right, right from the start. A taxi
      service needs a highly flexible and failproof system to rely on. The numbers of requests to process and
      operations to run can vary remarkably depending on both regular factors, like rush hours, and unpredictable
      ones, like the weather. Below are the data that are relevant at the time of our work on the project.
    
      </p>
    </div>
     
    <div
      class="container_full background-color-silver p-42_top p-42_bottom media-p-32_bottom media-p-32_top"
    >
      <div
        class="container_regular case_lottie"
      >
        <lottiemad-stub
          autoplay="true"
          height="414px"
          id="fault-tolerance-nambataxi"
          lottielink="img.jpg"
          width="100%"
        />
      </div>
    </div>
     
    <div
      class="container_regular m-56_top media-m-41_top"
    >
      <div
        class="m-80_bottom media-m-48_bottom case_statistics-container case_statistics-container-3"
      >
        <statisticcard-stub
          description="requests processed per second"
          descriptioncolor=""
          headertext=""
          headertextcolor=""
          id="application-speed-item-0"
          index="0"
          name=""
          number="3500"
          numbercolor="#4154b3"
          numbertext="3,500"
          section="application-speed"
          tag="h3"
          textbeforenumber=""
        />
        <statisticcard-stub
          description="at most it takes to send responses to drivers"
          descriptioncolor=""
          headertext=""
          headertextcolor=""
          id="application-speed-item-1"
          index="1"
          name="ms"
          number="20"
          numbercolor="#4154b3"
          numbertext="20"
          section="application-speed"
          tag="h3"
          textbeforenumber=""
        />
        <statisticcard-stub
          description="at most it takes to send responses to dispatchers"
          descriptioncolor=""
          headertext=""
          headertextcolor=""
          id="application-speed-item-2"
          index="2"
          name="ms"
          number="2.5"
          numbercolor="#4154b3"
          numbertext="2.5"
          section="application-speed"
          tag="h3"
          textbeforenumber=""
        />
      </div>
       
      <p
        class="case_paragraph m-24_bottom media-m-12_bottom"
      >
        
      Given the requirements and the limitations, we decided to implement a one-core architecture using multiple
      technologies and open-source software with no OS- or device-related restrictions.
    
      </p>
       
      <p
        class="case_paragraph m-72_bottom media-m-24_bottom"
      >
        
      Ruby has Ruby-SMPP that deals with the SMPP protocol to receive and send text messages. We needed Node.js
      because of Socket.IO that enables real-time messaging. Turning to open-source software and choosing to develop a
      web application meant that staff could work remotely and it was no longer necessary to spend money on switching
      equipment or licences. So we could attract more customers.
    
      </p>
       
      <h4
        class="case_title_h4 m-24_bottom media-m-12_bottom"
      >
        
      Implementation
    
      </h4>
       
      <p
        class="case_paragraph m-48_bottom media-m-24_bottom"
      >
        
      To build the backend part of the web application, we chose Django as a flexible and secure development tool that
      provided for efficient client-server interactions in a request-response mode. Due to its high scalability,
      Django could easily cope with heavy traffic processing multiple requests from the users and quickly responding
      to them. As a result, the application could run smoothly even during high-demand periods.
    
      </p>
    </div>
     
    <div
      class="container_full background-color-silver m-72_bottom media-m-48_bottom"
    >
      <div
        class="container_regular"
      >
        <lottiemad-stub
          autoplay="true"
          height="451px"
          id="implementation-nambataxi"
          lottielink="img.jpg"
          width="100%"
        />
      </div>
    </div>
     
    <div
      class="container_regular"
    >
      <h4
        class="case_title_h4 m-24_bottom"
      >
        
      Drivers
    
      </h4>
       
      <p
        class="case_paragraph m-48_bottom media-m-24_bottom"
      >
        
      Twisted was another component that we added to our web application’s architecture to make the remote system’s
      communications faster and more reliable. As a scalable event-driven engine, Twisted can handle numerous requests
      simultaneously. SMS notifications for clients were sent to drivers, i.e. our Twisted sent requests to Django
      through a Ruby daemon and then processed requests through the SMS provider’s centre (SMSC).
    
      </p>
    </div>
     
    <div
      class="container_full background-color-silver m-72_bottom media-m-48_bottom"
    >
      <div
        class="container_regular"
      >
        <lottiemad-stub
          autoplay="true"
          height="298px"
          id="drivers-nambataxi"
          lottielink="img.jpg"
          width="100%"
        />
      </div>
    </div>
     
    <div
      class="container_regular"
    >
      <h4
        class="case_title_h4 m-24_bottom"
      >
        
      SMS orders
    
      </h4>
       
      <p
        class="case_paragraph m-72_bottom media-m-48_bottom"
      >
        
      Instead of making phone calls, clients could now place an order by a text message. The messages they sent
      reached the SMSC first. After that, we picked up the message using a Ruby daemon and made a POST request. We
      chose the POST request method as a secure way of transmitting sensitive data provided by the app users. Finally,
      the POST requests were sent to Django that processed the received messages
    
      </p>
       
      <h4
        class="case_title_h4 m-24_bottom"
      >
        
      Dispatcher service
    
      </h4>
       
      <p
        class="case_paragraph m-48_bottom media-m-24_bottom"
      >
        
      Operators’ two work processes were to accept orders and to handle telephone calls. All orders come to Django via
      POST requests; Django then saves a Percona order and sends it to a specific Redis channel that is listening to
      Node.js. Next, the information is sent to the operators’ broadcast channel.
    
      </p>
    </div>
     
    <div
      class="container_full background-color-silver p-66_top media-p-38_top m-48_bottom media-m-24_bottom"
    >
      <div
        class="container_regular"
      >
        <lottiemad-stub
          autoplay="true"
          height="512px"
          id="dispatch-service-nambataxi"
          lottielink="img.jpg"
          width="100%"
        />
      </div>
    </div>
     
    <div
      class="container_regular"
    >
      <p
        class="case_paragraph m-72_bottom media-m-48_bottom"
      >
        
      The simplest part of our system automates managers’ work. The core components here are Django and Percona—an
      open-source database management system. This helps managers to deal with large amounts of information, such as
      orders, client and driver databases, in a prompt and easy manner. Django collects data from Percona and sends it
      to Excel or to the browser.
    
      </p>
       
      <h4
        class="case_title_h4 m-24_bottom"
      >
        
      Transition
    
      </h4>
       
      <p
        class="case_paragraph m-72_bottom media-m-48_bottom"
      >
        
      Moving to the new software was difficult, and we learned many lessons from it. The transition took seven days
      and taught us to make better use of our frameworks and to create more realistic, reliable load tests.
      Admittedly, we lost about 8% of orders that week, but we brought the waiting time for passengers from 8 down to
      5 minutes.
    
      </p>
       
      <h4
        class="case_title_h4 m-24_bottom"
      >
        
      Further growth
    
      </h4>
       
      <p
        class="case_paragraph m-72_bottom media-m-48_bottom"
      >
        
      Quick growth ensued, presenting a new round of challenges. We needed to constantly introduce changes and
      improvements to ensure that the system could handle the load. For example, we used Sentinel at some point to
      provide fault tolerance for Redis. Later, we switched to Asterisk 11.5 as the telephone exchange to manage GSM
      gateways and providers. When we discovered that Asterisk had trouble bridging audio between devices, we moved to
      FreeSWITCH. We were constantly perfecting the system.
    
      </p>
    </div>
  </section>
</div>
`;

exports[`FaultTolerance component should render correctly with return undefined from initIntersectionObserver 1`] = `
<div>
  <section>
    <div
      class="container_regular"
    >
      <h2
        class="case_title_h2 m-24_bottom media-m-12_bottom"
      >
        
      Building a fault-tolerant architecture
    
      </h2>
       
      <p
        class="case_paragraph m-24_bottom"
      >
        
      We invested much effort in the architecture because we wanted to do things right, right from the start. A taxi
      service needs a highly flexible and failproof system to rely on. The numbers of requests to process and
      operations to run can vary remarkably depending on both regular factors, like rush hours, and unpredictable
      ones, like the weather. Below are the data that are relevant at the time of our work on the project.
    
      </p>
    </div>
     
    <div
      class="container_full background-color-silver p-42_top p-42_bottom media-p-32_bottom media-p-32_top"
    >
      <div
        class="container_regular case_lottie"
      >
        <lottiemad-stub
          autoplay="true"
          height="414px"
          id="fault-tolerance-nambataxi"
          lottielink="img.jpg"
          width="100%"
        />
      </div>
    </div>
     
    <div
      class="container_regular m-56_top media-m-41_top"
    >
      <div
        class="m-80_bottom media-m-48_bottom case_statistics-container case_statistics-container-3"
      >
        <statisticcard-stub
          description="requests processed per second"
          descriptioncolor=""
          headertext=""
          headertextcolor=""
          id="application-speed-item-0"
          index="0"
          name=""
          number="3500"
          numbercolor="#4154b3"
          numbertext="3,500"
          section="application-speed"
          tag="h3"
          textbeforenumber=""
        />
        <statisticcard-stub
          description="at most it takes to send responses to drivers"
          descriptioncolor=""
          headertext=""
          headertextcolor=""
          id="application-speed-item-1"
          index="1"
          name="ms"
          number="20"
          numbercolor="#4154b3"
          numbertext="20"
          section="application-speed"
          tag="h3"
          textbeforenumber=""
        />
        <statisticcard-stub
          description="at most it takes to send responses to dispatchers"
          descriptioncolor=""
          headertext=""
          headertextcolor=""
          id="application-speed-item-2"
          index="2"
          name="ms"
          number="2.5"
          numbercolor="#4154b3"
          numbertext="2.5"
          section="application-speed"
          tag="h3"
          textbeforenumber=""
        />
      </div>
       
      <p
        class="case_paragraph m-24_bottom media-m-12_bottom"
      >
        
      Given the requirements and the limitations, we decided to implement a one-core architecture using multiple
      technologies and open-source software with no OS- or device-related restrictions.
    
      </p>
       
      <p
        class="case_paragraph m-72_bottom media-m-24_bottom"
      >
        
      Ruby has Ruby-SMPP that deals with the SMPP protocol to receive and send text messages. We needed Node.js
      because of Socket.IO that enables real-time messaging. Turning to open-source software and choosing to develop a
      web application meant that staff could work remotely and it was no longer necessary to spend money on switching
      equipment or licences. So we could attract more customers.
    
      </p>
       
      <h4
        class="case_title_h4 m-24_bottom media-m-12_bottom"
      >
        
      Implementation
    
      </h4>
       
      <p
        class="case_paragraph m-48_bottom media-m-24_bottom"
      >
        
      To build the backend part of the web application, we chose Django as a flexible and secure development tool that
      provided for efficient client-server interactions in a request-response mode. Due to its high scalability,
      Django could easily cope with heavy traffic processing multiple requests from the users and quickly responding
      to them. As a result, the application could run smoothly even during high-demand periods.
    
      </p>
    </div>
     
    <div
      class="container_full background-color-silver m-72_bottom media-m-48_bottom"
    >
      <div
        class="container_regular"
      >
        <lottiemad-stub
          autoplay="true"
          height="451px"
          id="implementation-nambataxi"
          lottielink="img.jpg"
          width="100%"
        />
      </div>
    </div>
     
    <div
      class="container_regular"
    >
      <h4
        class="case_title_h4 m-24_bottom"
      >
        
      Drivers
    
      </h4>
       
      <p
        class="case_paragraph m-48_bottom media-m-24_bottom"
      >
        
      Twisted was another component that we added to our web application’s architecture to make the remote system’s
      communications faster and more reliable. As a scalable event-driven engine, Twisted can handle numerous requests
      simultaneously. SMS notifications for clients were sent to drivers, i.e. our Twisted sent requests to Django
      through a Ruby daemon and then processed requests through the SMS provider’s centre (SMSC).
    
      </p>
    </div>
     
    <div
      class="container_full background-color-silver m-72_bottom media-m-48_bottom"
    >
      <div
        class="container_regular"
      >
        <lottiemad-stub
          autoplay="true"
          height="298px"
          id="drivers-nambataxi"
          lottielink="img.jpg"
          width="100%"
        />
      </div>
    </div>
     
    <div
      class="container_regular"
    >
      <h4
        class="case_title_h4 m-24_bottom"
      >
        
      SMS orders
    
      </h4>
       
      <p
        class="case_paragraph m-72_bottom media-m-48_bottom"
      >
        
      Instead of making phone calls, clients could now place an order by a text message. The messages they sent
      reached the SMSC first. After that, we picked up the message using a Ruby daemon and made a POST request. We
      chose the POST request method as a secure way of transmitting sensitive data provided by the app users. Finally,
      the POST requests were sent to Django that processed the received messages
    
      </p>
       
      <h4
        class="case_title_h4 m-24_bottom"
      >
        
      Dispatcher service
    
      </h4>
       
      <p
        class="case_paragraph m-48_bottom media-m-24_bottom"
      >
        
      Operators’ two work processes were to accept orders and to handle telephone calls. All orders come to Django via
      POST requests; Django then saves a Percona order and sends it to a specific Redis channel that is listening to
      Node.js. Next, the information is sent to the operators’ broadcast channel.
    
      </p>
    </div>
     
    <div
      class="container_full background-color-silver p-66_top media-p-38_top m-48_bottom media-m-24_bottom"
    >
      <div
        class="container_regular"
      >
        <lottiemad-stub
          autoplay="true"
          height="512px"
          id="dispatch-service-nambataxi"
          lottielink="img.jpg"
          width="100%"
        />
      </div>
    </div>
     
    <div
      class="container_regular"
    >
      <p
        class="case_paragraph m-72_bottom media-m-48_bottom"
      >
        
      The simplest part of our system automates managers’ work. The core components here are Django and Percona—an
      open-source database management system. This helps managers to deal with large amounts of information, such as
      orders, client and driver databases, in a prompt and easy manner. Django collects data from Percona and sends it
      to Excel or to the browser.
    
      </p>
       
      <h4
        class="case_title_h4 m-24_bottom"
      >
        
      Transition
    
      </h4>
       
      <p
        class="case_paragraph m-72_bottom media-m-48_bottom"
      >
        
      Moving to the new software was difficult, and we learned many lessons from it. The transition took seven days
      and taught us to make better use of our frameworks and to create more realistic, reliable load tests.
      Admittedly, we lost about 8% of orders that week, but we brought the waiting time for passengers from 8 down to
      5 minutes.
    
      </p>
       
      <h4
        class="case_title_h4 m-24_bottom"
      >
        
      Further growth
    
      </h4>
       
      <p
        class="case_paragraph m-72_bottom media-m-48_bottom"
      >
        
      Quick growth ensued, presenting a new round of challenges. We needed to constantly introduce changes and
      improvements to ensure that the system could handle the load. For example, we used Sentinel at some point to
      provide fault tolerance for Redis. Later, we switched to Asterisk 11.5 as the telephone exchange to manage GSM
      gateways and providers. When we discovered that Asterisk had trouble bridging audio between devices, we moved to
      FreeSWITCH. We were constantly perfecting the system.
    
      </p>
    </div>
  </section>
</div>
`;
